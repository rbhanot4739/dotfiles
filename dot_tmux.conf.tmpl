# vim:set ft=tmux:
# vim:set foldmethod=marker:
# vim:set foldmarker=<<<,>>>:
# vim:set foldlevelstart=1:

set -g set-clipboard on
setw -g mouse on
set-option -g display-time 500
set -g display-panes-time 7000
set-option -g destroy-unattached off
setw -g automatic-rename on
set -g base-index 1         # start windows numbering at 1
setw -g pane-base-index 1   # make pane numbering consistent with windows
set -g renumber-windows on  # renumber windows sequentially after closing any of them
set -g default-terminal "tmux-256color"
# set -sa terminal-features ",xterm-256color:extkeys"
set -ag terminal-overrides ",screen-256color,xterm-256color:Tc"
set -as terminal-overrides ',*:Smulx=\E[4::%p1%dm'  # undercurl support
set -as terminal-overrides ',*:Setulc=\E[58::2::::%p1%{65536}%/%d::%p1%{256}%/%{255}%&%d::%p1%{255}%&%d%;m'  # underscore colours - needs tmux-3.0
set -g status-keys emacs
# set-option -g extended-keys on

# send keycodes for these keys as such
bind-key -T root         S-Enter     send-keys Escape "[13;2u"
bind-key -T root         M-Enter     send-keys Escape "[13;3u"
bind-key -T root         M-S-Enter   send-keys Escape "[13;4u"
bind-key -T root         C-Enter     send-keys Escape "[13;5u"
bind-key -T root         C-S-Enter   send-keys Escape "[13;6u"
bind-key -T root         C-M-Enter   send-keys Escape "[13;7u"
bind-key -T root         C-M-S-Enter send-keys Escape "[13;8u"

# Smart pane switching with awareness of Neovim splits.
# pane-is-vim is set by the smart-split nvim plugin
bind-key -n C-h if -F "#{@pane-is-vim}" 'send-keys C-h'  'select-pane -L'
bind-key -n C-j if -F "#{@pane-is-vim}" 'send-keys C-j'  'select-pane -D'
bind-key -n C-k if -F "#{@pane-is-vim}" 'send-keys C-k'  'select-pane -U'
bind-key -n C-l if -F "#{@pane-is-vim}" 'send-keys C-l'  'select-pane -R'

bind-key -n C-Left if -F "#{@pane-is-vim}" 'send-keys C-Left' 'resize-pane -L 3'
bind-key -n C-Down if -F "#{@pane-is-vim}" 'send-keys C-Down' 'resize-pane -D 3'
bind-key -n C-Up if -F "#{@pane-is-vim}" 'send-keys C-Up' 'resize-pane -U 3'
bind-key -n C-Right if -F "#{@pane-is-vim}" 'send-keys C-Right' 'resize-pane -R 3'

tmux_version='$(tmux -V | sed -En "s/^tmux ([0-9]+(.[0-9]+)?).*/\1/p")'
if-shell -b '[ "$(echo "$tmux_version < 3.0" | bc)" = 1 ]' \
    "bind-key -n 'C-\\' if -F \"#{@pane-is-vim}\" 'send-keys C-\\'  'select-pane -l'"
if-shell -b '[ "$(echo "$tmux_version >= 3.0" | bc)" = 1 ]' \
    "bind-key -n 'C-\\' if -F \"#{@pane-is-vim}\" 'send-keys C-\\\\'  'select-pane -l'"

bind-key -T copy-mode-vi 'C-h' select-pane -L
bind-key -T copy-mode-vi 'C-j' select-pane -D
bind-key -T copy-mode-vi 'C-k' select-pane -U
bind-key -T copy-mode-vi 'C-l' select-pane -R
bind-key -T copy-mode-vi 'C-\' select-pane -l

# <<< Key bindings
{{- if not (and (eq .chezmoi.os "linux") (contains "rdev" (env "RDEV_ID")) (eq "coder" .chezmoi.username) (eq "/home/coder" .chezmoi.homeDir)) }}
unbind C-b
set-option -g prefix M-a
bind M-a send-prefix
{{- end }}

bind-key r source-file ~/.tmux.conf \; display-message "Conf reloaded..."

bind-key N new-session
bind-key c new-window -c "#{pane_current_path}"
bind-key M-o run-shell 'tmux_sessions'
bind-key M-w run-shell 'tmux_panes'

bind M command-prompt -p "Show man page for:" "popup -w95% -h95% -xC -yC -E 'man %%'"

bind-key M-, display-menu -T "#[align=centre]Quick Actions" -xR -yS \
  "Set pane title"      R "command-prompt -I '#T' -p 'New pane title:' 'select-pane -T \"%%\"'" \
  "Set window title"    r "command-prompt -I '#W' -p 'New window title:' 'rename-window \"%%\"'" \
  "" \
  "Copy Mode"           c  "copy-mode" \
  "Popup"               p  "popup -w95% -h95% -xC -yC " \
  "" \
  "Toggle Mouse"        m  "set-option -g mouse" \
  "Toggle Status Bar"   s  "set -g status" \
  "" \
  "Kill Session"        k  "confirm kill-session" \
  "Kill Server"         K  "confirm kill-server"

bind-key -n S-right next
bind-key -n S-left prev
bind-key l last-window

bind-key -n M-Enter resize-pane -Z    # maximize current pane
bind-key i command-prompt -p "New pane title: " "select-pane -T '%%'"    # rename pane-title

bind-key "|" split-window -fh -c "#{pane_current_path}"
bind-key "\\" split-window -h -c "#{pane_current_path}"
bind-key "-" split-window -v -c "#{pane_current_path}"
bind-key "_" split-window -fv -c "#{pane_current_path}"
bind-key b break-pane -d
bind-key J command-prompt -p "join pane from: "  "join-pane -h -s '%%'"
bind-key j command-prompt -p "join pane from: "  "join-pane -v -s '%%'"

bind-key -n C-S-Up  swap-pane -UZ
bind-key -n C-S-Down  swap-pane -DZ
bind-key -nr C-S-right swap-window -d -t +1
bind-key -nr C-S-left swap-window -d -t -1

bind-key a setw synchronize-panes; 
bind-key s set -g status

bind-key k confirm kill-session
bind-key K confirm kill-server
bind-key x confirm kill-pane
bind-key X confirm kill-window

# >>>

# <<< Copy Mode
setw -g mode-keys vi

#unbind [
#unbind ]
unbind -T copy-mode-vi Enter
bind M-c copy-mode

bind-key -T copy-mode-vi v send-keys -X begin-selection
bind-key -T copy-mode-vi V send-keys -X select-line
bind-key -T copy-mode-vi C-v send-keys -X rectangle-toggle
# copy selection with y and Enter
bind-key -T copy-mode-vi Enter send-keys -X copy-pipe-and-cancel "pbcopy"
bind-key -T copy-mode-vi y send-keys -X copy-pipe-and-cancel "pbcopy"
# copy entire line with Space
bind-key -T copy-mode-vi Space send-keys -X copy-pipe-line-and-cancel "pbcopy"
bind-key -T copy-mode-vi Y send-keys -X copy-pipe-end-of-line-and-cancel "pbcopy"

unbind p
bind p paste-buffer
bind M-p choose-buffer

# auto-search with Alt-/ without going to copy mode first
bind-key M-/ copy-mode\; command-prompt -i -p "search up" "send -X search-backward-incremental "%%%""
# >>>


# Mouse integration ---------------------------------

bind-key m set-option -g mouse \; display-message 'Mouse #{?mouse,on,off}'

# Selection with mouse should copy to clipboard right away, in addition to the default action.
unbind -n -Tcopy-mode-vi MouseDragEnd1Pane
bind -Tcopy-mode-vi MouseDragEnd1Pane send -X copy-pipe-and-cancel “reattach-to-user-namespace pbcopy”

# unbind -T DoubleClick1Pane
bind -Tcopy-mode-vi DoubleClick1Pane  send -X select-word \; send -X copy-pipe-and-cancel “reattach-to-user-namespace pbcopy”

# Middle click to paste from the clipboard
unbind-key MouseDown2Pane
bind-key -n MouseDown2Pane run "tmux set-buffer \"$(xsel -o --clipboard)\"; tmux paste-buffer"

# ZOOM: toggle with right click on pane
unbind-key -n MouseDown3Pane
bind-key -n MouseDown3Pane  resize-pane -Z -t=

# Drag to re-order windows
bind-key -n MouseDrag1Status swap-window -t=

# middle click to kill a window
bind-key -n MouseUp2Status kill-window -t=

# Double click on the window list to open a new window
bind-key -n DoubleClick1Status new-window
# --------------------------------------------------------------------------------

{{- if not (and (eq .chezmoi.os "linux") (contains "rdev" (env "RDEV_ID")) (eq "coder" .chezmoi.username) (eq "/home/coder" .chezmoi.homeDir)) }}

# TPM settings
set -g @plugin 'tmux-plugins/tpm'
set -g @plugin 'tmux-plugins/tmux-sensible'

# <<<  theme config
set -ogq @truncated_path "#(bash $HOME/scripts/truncate_path.sh #{pane_current_path} 2 1)"

source $HOME/tmux-themes/theme.conf
# >>>

# <<< tmux fzf-url
 set -g @plugin 'wfxr/tmux-fzf-url'
 set -g @fzf-url-bind 'M-x'
 set -g @fzf-url-history-limit '2000'

# >>>

# <<< continuum & resurrect
set -g @plugin 'tmux-plugins/tmux-continuum'
# restore session automaticlly
set -g @continuum-save-interval '30'
# set -g @continuum-restore 'on'
# set -g @continuum-boot 'on'

set -g @plugin 'tmux-plugins/tmux-resurrect'
set -g @resurrect-capture-pane-contents 'on'
set -g @resurrect-processes 'ssh mysql "~ipython" "~lazygit" "~tail->tail *'
# for vim
set -g @resurrect-strategy-vim 'session'
# for neovim
set -g @resurrect-strategy-nvim 'session'
# >>>
 
set -g @plugin 'joshmedeski/tmux-nerd-font-window-name'

if "test ! -d ~/.tmux/plugins/tpm" \
   "run 'git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm && ~/.tmux/plugins/tpm/bin/install_plugins'"

run '~/.tmux/plugins/tpm/tpm'

{{- end }}
