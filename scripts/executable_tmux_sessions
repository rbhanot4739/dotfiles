#!/usr/bin/env bash

export PROMPT_MODE_FILE="$HOME/.tmux_session_mode"

# ================================================================================
#                           SESSION ACTIONS
# ================================================================================
# Functions that perform actions on tmux sessions

# Get all tmux sessions with attachment status
get_tmux_sessions() {
  sess_cmd="tmux list-sessions -F '#S#{?session_attached, (attached),}' 2> /dev/null"
  eval "$sess_cmd"
}
export -f get_tmux_sessions

# Get all tmux panes (adapted from tmux_panes script)
get_tmux_panes() {
  local current_pane=$(tmux display-message -p '#S:#{window_index}.#{pane_index}')
  
  tmux list-panes -a -F "#S:#{window_index}.#{pane_index}: #S -> #{window_name} -> #{pane_title} <>#{pane_current_path}" | grep -v "$current_pane" |
  while read -r line; do
    # shell expansion
    path="${line##*<>}"    # this removes everything from beginning of the string upto `*<>`
    prefix="${line%%<>*}"    # this removes everything from the end of the string upto `<>*`

    path="${path/#$HOME/~}"
    # Split the path into components
    IFS='/' read -r -a path_components <<<"$path"

    truncated_path=""
    for ((i = 0; i < ${#path_components[@]} - 1; i++)); do
      if [[ "${path_components[$i]}" == .* ]]; then
        path_components[$i]="${path_components[$i]:0:3}"
      else
        path_components[$i]="${path_components[$i]:0:2}"
      fi
    done
    truncated_path=$(
      IFS=/
      echo "${path_components[*]}"
    )
    echo "$prefix [$truncated_path]"
  done
}
export -f get_tmux_panes

get_zoxide_dirs() {
  if [[ -f "$HOME/scripts/truncate_path.sh" ]]; then
    zoxide query -l | head -20 | grep -v '.*\/\s*$' | xargs -I {} "$HOME/scripts/truncate_path.sh" {} 2 2
  else
    zoxide query -l | head -20 | grep -v '.*\/\s*$' | xargs -n1 basename
  fi
}
export -f get_zoxide_dirs

# Get all tmuxinator projects
get_tmuxinator_projects() {
  tmuxinator list | tail -n +2 | sed 's/ \{1,\}/\n/g'
}
export -f get_tmuxinator_projects

# Get current active tmux session name
get_current_session() {
  [[ -n "$TMUX" ]] && tmux display-message -p '#S'
}

# Delete a tmux session with user confirmation
del_session() {
  clear
  [[ "$1" =~ "attached" ]] && echo "You can't delete the currently attached session !!" && sleep 2 && return
  echo -n "Are you sure you want to delete session ($1) [y/n]: "
  read -r -n 1 response
  response=${response:-n}
  [[ "$response" =~ ^[Yy]$ ]] && tmux kill-session -t "$1"
}
export -f del_session

# Rename a tmux session with interactive input
rename_session() {
  clear
  old_name=$(echo "$1" | cut -d' ' -f1)
  echo -n "Please enter new session name[$old_name] (Escape/Ctrl+C to cancel): "

  user_input=""
  while true; do
    read -rsn1 input

    if [[ "$input" == $'\e' ]]; then
      # Escape key - cancel operation
      return
    elif [[ "$input" == $'\n' || "$input" == $'\x0' ]]; then
      # Enter key - confirm input
      break
    elif [[ "$input" == $'\x7f' || "$input" == $'\b' ]]; then
      # Backspace - remove last character
      if [[ -n "$user_input" ]]; then
        user_input="${user_input%?}"
        echo -ne "\b \b"
      fi
    else
      # Regular character - add to input
      user_input+="$input"
      echo -n "$input"
    fi
  done

  session_name="$user_input"
  [[ -n "$session_name" ]] && tmux rename-session -t "$old_name" "$session_name"
}
export -f rename_session

# Create new session with user confirmation
create_session() {
  local session="$1"
  local tmux_action="$2"
  echo -n "No existing session found with name '$session'. Do you want to create a new session? (y/n): "
  read -r -n 1 response
  response=${response:-Y}
  if [[ "$response" =~ ^[Yy]$ ]]; then
    echo -e "\nCreating new session named '$session'"
    tmux new-session -d -s "$1" && tmux "$tmux_action" -t "$session"
  else
    echo -e "\nSession creation aborted."
  fi
}
export -f get_current_session

# Generate preview content based on current mode
generate_preview() {
  local selection="$1"
  local mode_file="$PROMPT_MODE_FILE"
  local current_mode

  # Read current mode, default to tmux if file doesn't exist
  if [[ -f "$mode_file" ]]; then
    current_mode=$(cat "$mode_file")
  else
    current_mode="tmux"
  fi

  case "$current_mode" in
  "panes")
    # Preview for tmux panes (from tmux_panes script)
    local pane_id=$(echo "$selection" | sed "s/: .*//")
    tmux capture-pane -ep -t "$pane_id"
    ;;
  "zoxide")
    # Preview for zoxide directories
    local dir_path
    dir_path=$(zoxide query "$(eval echo "$selection" | awk -F '/' '{print $(NF-1)"/"$NF}')" 2>/dev/null)

    if [[ -n "$dir_path" && -d "$dir_path" ]]; then
      echo "üìÅ Directory: $dir_path"
      echo "üìä Frequency: $(zoxide query --score "$dir_path" 2>/dev/null | awk '{print $1}' || echo "N/A")"
      echo ""

      # Show directory contents
      if command -v eza >/dev/null 2>&1; then
        echo "üìÇ Contents:"
        eza -a --color=always --group-directories-first --time-style=relative "$dir_path" 2>/dev/null | head -20
      elif command -v ls >/dev/null 2>&1; then
        echo "üìÇ Contents:"
        ls -a --color=always "$dir_path" 2>/dev/null | head -20
      fi

      # Show git status if it's a git repository
      if [[ -d "$dir_path/.git" ]]; then
        echo ""
        echo "üîó Git Status:"
        cd "$dir_path" 2>/dev/null && git status --porcelain 2>/dev/null | head -10
      fi
    fi
    ;;
  "tmux" | *)
    # Preview for tmux sessions (existing functionality)
    local session_name=$(echo "$selection" | cut -d" " -f1)
    if tmux has-session -t "$session_name" 2>/dev/null; then
      echo "Status: üü¢ Active"
      echo "Session: $session_name"
      echo ""
      echo "Windows:"
      tmux list-windows -t "$session_name" 2>/dev/null
    fi
    ;;
  esac
}
export -f generate_preview

set_mode() {
  echo "$1" >"$PROMPT_MODE_FILE"
}
export -f set_mode

# ================================================================================
#                              FZF CONFIGURATION
# ================================================================================
tmux_panes_prompt="  Û∞çπ  Tmux Panes ‚Ä∫ "
zoxide_prompt="  Û∞âã  Zoxide Directories (Top 20) ‚Ä∫ "
tmux_sessions_prompt="  Û∞ì´  Tmux Sessions ‚Ä∫ "
tmuxinator_prompt="  Û∞úé  Tmuxinator Projects ‚Ä∫ "

TRANSFORMER="
if [[ \$FZF_PROMPT =~ Panes ]]; then
  echo \"change-prompt(${tmux_sessions_prompt})+reload(set_mode tmux; get_tmux_sessions)\"
elif [[ \$FZF_PROMPT =~ Sessions ]]; then
  if [[ \$(command -v zoxide) ]]; then
    echo \"change-prompt(${zoxide_prompt})+reload(set_mode zoxide; get_zoxide_dirs)\"
  elif [[ \$(command -v tmuxinator) ]]; then
    echo \"change-prompt(${tmuxinator_prompt})+reload(set_mode tmuxinator; get_tmuxinator_projects)\"
  fi
elif [[ \$FZF_PROMPT =~ Zoxide ]]; then
  if [[ \$(command -v tmuxinator) ]]; then
    echo \"change-prompt(${tmuxinator_prompt})+reload(set_mode tmuxinator; get_tmuxinator_projects)\"
  else
    echo \"change-prompt(${tmux_panes_prompt})+reload(set_mode panes; get_tmux_panes)\"
  fi
else
  echo \"change-prompt(${tmux_panes_prompt})+reload(set_mode panes; get_tmux_panes)\"
fi
"

# FZF key bindings
del_bind="del:execute(del_session {})+reload(get_tmux_sessions)"
rename_bind="ctrl-e:execute(rename_session {})+reload(get_tmux_sessions)"
fzf_binds='enter:accept-or-print-query,tab:down,shift-tab:up'

# Theme configuration
theme_opts=()
read -r selected_theme _ < <(get-theme)
theme_file="$HOME/fzf-themes/${selected_theme}.sh"

if [[ -f "$theme_file" ]]; then
  set -o noglob
  source "$theme_file"
  set +o noglob
fi

# Professional layout configuration
if [[ -n "$TMUX" ]]; then
  layout="--tmux center,95%,85% --reverse --no-scrollbar"
else
  # layout="--height 85% --layout=reverse --margin 2%,2%,2%,2% --no-scrollbar"
  layout="--height 85% --layout=reverse --margin 1% --no-scrollbar"
fi

# Professional footer with keymaps section and improved alignment
footer=$'Û∞åå Keymaps:\n  Û∞ò≥  ?         Switch Modes\n  Û∞åë  Enter     Attach/Start Session\n  Û∞ëï  Ctrl-e    Rename Session\n  Û∞Öñ  Del       Kill Session'

# Enhanced FZF options with professional styling
fzf_opts=(
  "${theme_opts[@]}"
  --ansi
  --cycle
  --border rounded
  --border-label "  Û∞ì´ Tmux Session Manager  "
  --style full
  --info inline-right
  --prompt "‚ùØ "
  --pointer "Û∞Åï"
  --marker "Û∞Ñ≤"
  --padding 1,3
  --header-first
  --footer "$footer"
  --preview-window "right,50%,border-left,wrap"
  --no-separator
  --bind "$fzf_binds"
  --bind "$del_bind"
  --bind "$rename_bind"
  $layout
  --bind "?:transform:$TRANSFORMER"
  --bind "ctrl-/:toggle-preview"
  --preview 'generate_preview {}'
)

# ================================================================================
#                           CORE SESSION LOGIC
# ================================================================================
# Main functions for session attachment and management
tmux_start_session_in_dir() {
  local session="$1"
  local session_dir="$2"
  local tmux_action=$([[ -n "$TMUX" ]] && echo "switch-client" || echo "attach-session")

  if [[ -n "$session_dir" && -d "$session_dir" ]]; then
    local new_session=$(basename "$session_dir")
    cd "$session_dir" 2>/dev/null || {
      echo "$session_dir can't be accessed"
      return 1
    }
    if [[ $? -ne 0 ]]; then
      return 1
    fi
    tmux new-session -d -s "$new_session" -c "$session_dir" 2>/dev/null &&
      tmux "$tmux_action" -t "$new_session"
  else
    # Use HOME as fallback
    session_dir="$HOME"
    cd "$session_dir"
    if [[ $? -ne 0 ]]; then
      return 1
    fi
    tmux new-session -d -s "$session" -c "$session_dir" 2>/dev/null &&
      tmux "$tmux_action" -t "$session"
  fi
  return 0
}
export -f tmux_start_session_in_dir

tmux_session_from_dir() {
  local session="$1"
  local tmux_sessions="$2"
  local tmux_action="$3"

  local session_dir
  session_dir=$(zoxide query "$(eval echo "$session" | awk -F '/' '{print $(NF-1)"/"$NF}')" 2>/dev/null)
  local new_session
  new_session=$(basename "$session_dir")

  if [[ $(echo "$tmux_sessions" | tr '\n' ' ') =~ (^|[[:space:]])$new_session($|[[:space:]]) ]]; then
    cd "$session_dir" 2>/dev/null || {
      echo "$session_dir can't be accessed"
      return 1
    }
    tmux "$tmux_action" -t "$new_session"
  else
    cd "$session_dir" 2>/dev/null || {
      echo "$session_dir can't be accessed"
      return 1
    }
    tmux new-session -d -s "$new_session" -c "$session_dir" 2>/dev/null &&
      tmux "$tmux_action" -t "$new_session"
  fi
}
export -f tmux_session_from_dir

tmux_attach_start() {
  local session="$1"
  local mode="$2"
  local tmux_action=$([[ -n "$TMUX" ]] && echo "switch-client" || echo "attach-session")
  local tmux_sessions=$(get_tmux_sessions)

  # if [[ $current_mode == "panes" ]]; then
  if [[ $(cat $PROMPT_MODE_FILE) == "panes" ]]; then
    pane=$(echo $session | sed "s/: .*//")
    tmux $tmux_action -t "$pane"
    # tmux switch-client -t "$pane"
    return 0
  fi


  if [[ "$mode" == "term" ]]; then
    create_session "$session" "$tmux_action"
    return 0
  fi

  # 1. Check if it's an existing tmux session
  if [[ $(echo "$tmux_sessions" | tr '\n' ' ') =~ (^|[[:space:]])$session($|[[:space:]]) ]]; then
    tmux "$tmux_action" -t "$session"
    return 0
  fi

  # 2. Check if it's a tmuxinator project
  if command -v tmuxinator >/dev/null && [[ $(tmuxinator list | tail -n +2 | tr '\n' ' ') =~ (^|[[:space:]])$session($|[[:space:]]) ]]; then
    tmuxinator start "$session"
    return 0
  fi

  # handle_zoxide $session $tmux_sessions $tmux_action
  # 3. Check if it's a zoxide directory
  if [[ $(get_zoxide_dirs | tr '\n' ' ') =~ (^|[[:space:]])$session($|[[:space:]]) ]]; then
    tmux_session_from_dir "$session" "$tmux_sessions" "$tmux_action"
    return 0
  fi

  # 4. If MODE is "zoxide", try raw zoxide query
  if [[ $(cat $PROMPT_MODE_FILE) == "zoxide" ]]; then
    local session_dir=$(zoxide query "$session" 2>/dev/null)
    tmux_start_session_in_dir "$session" "$session_dir"
    return 0
  else
    tmux_start_session_in_dir "$session"
  fi
}

# ================================================================================
#                           MAIN REQUEST HANDLER
# ================================================================================
# Entry point and flow control

handler_request() {
  local shell session tmux_sessions selection
  shell=$(command -v bash)
  session="$1"
  tmux_sessions=$(get_tmux_sessions)

  if [[ -n "$session" ]]; then
    tmux_attach_start "$session" "term"
    return 0
  fi

  # Start with panes if we're in tmux and have panes available
  if [[ -n "$TMUX" && -n "$(get_tmux_panes)" ]]; then
    set_mode "panes"
    selection=$(get_tmux_panes | SHELL="$shell" fzf "${fzf_opts[@]}" --prompt "$tmux_panes_prompt")
  elif [[ -z "$TMUX" && -z "$tmux_sessions" ]]; then
    set_mode "zoxide"
    selection=$(get_zoxide_dirs | SHELL="$shell" fzf "${fzf_opts[@]}" --prompt "$zoxide_prompt")
  else
    set_mode "tmux"
    selection=$(echo -n -e "$tmux_sessions" | SHELL="$shell" fzf "${fzf_opts[@]}" --prompt "$tmux_sessions_prompt")
  fi

  [[ -z "$selection" ]] && return 0
  
  # Handle pane selection differently
    tmux_attach_start "$selection" "fzf"
  return 0
}

# ================================================================================
#                               ENTRY POINT
# ================================================================================
# Argument validation and script execution

# Validate arguments and start the script
if [[ $# -gt 1 ]]; then
  echo "Invalid use of command, Usage: \"$0\" [session-name]"
  return
fi

# Start the main handler
handler_request "$@"
