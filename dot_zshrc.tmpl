# vim:ft=zsh

### Added by Zinit's installer
if [[ ! -f $HOME/.local/share/zinit/zinit.git/zinit.zsh ]]; then
    print -P "%F{33} %F{220}Installing %F{33}ZDHARMA-CONTINUUM%F{220} Initiative Plugin Manager (%F{33}zdharma-continuum/zinit%F{220})â€¦%f"
    command mkdir -p "$HOME/.local/share/zinit" && command chmod g-rwX "$HOME/.local/share/zinit"
    command git clone https://github.com/zdharma-continuum/zinit "$HOME/.local/share/zinit/zinit.git" && \
        print -P "%F{33} %F{34}Installation successful.%f%b" || \
        print -P "%F{160} The clone has failed.%f%b"
fi

source "$HOME/.local/share/zinit/zinit.git/zinit.zsh"
autoload -Uz _zinit
# (( ${+_comps} )) && _comps[zinit]=_zinit

(( ${+commands[direnv]} )) && emulate zsh -c "$(direnv export zsh)"
# Enable Powerlevel10k instant prompt
if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi
(( ${+commands[direnv]} )) && emulate zsh -c "$(direnv hook zsh)"

# ======== Critical Environment Setup ========
export LANG=en_US.UTF-8
export LC_ALL=en_US.UTF-8
export XDG_CONFIG_HOME="$HOME/.config"
export XDG_CACHE_HOME="$HOME/.cache"
export XDG_DATA_HOME="$HOME/.local/share"

typeset -U PATH    # Make PATH unique

{{- if (and (eq .chezmoi.os "linux") (contains "rdev" (env "RDEV_ID")) (eq "coder" .chezmoi.username) (eq "/home/coder" .chezmoi.homeDir)) }}
[[ -d $HOME/.pixi/bin ]] && export PATH="$HOME/.pixi/bin:$PATH"
{{- end }}
[[ -d $HOME/.local/bin ]] && export PATH="$HOME/.local/bin:$PATH"
[[ -d $HOME/scripts ]] && export PATH="$HOME/scripts:$PATH"

{{- if (eq .chezmoi.os "darwin") }}

if [[ -f "/opt/homebrew/bin/brew" ]]; then
  eval "$(/opt/homebrew/bin/brew shellenv)"
fi
{{- end }}

# ======== History Configuration ========
export HISTSIZE=500000
export HISTFILE=~/.zsh_history
export SAVEHIST=$HISTSIZE
export HISTDUP=erase

setopt append_history
setopt hist_ignore_space
setopt hist_ignore_all_dups
setopt share_history
setopt hist_reduce_blanks
setopt inc_append_history
setopt hist_save_no_dups
setopt hist_find_no_dups

# ======== Basic Setup ========
echo -ne '\e[5 q'    # Use beam shape cursor
autoload -U colors && colors

# ======== Plugin Configuration ========
ZVM_INIT_MODE=sourcing
ZVM_LINE_INIT_MODE=$ZVM_MODE_INSERT
ZVM_LAZY_KEYBINDINGS=true
ZSH_AUTOSUGGEST_STRATEGY=(history completion)

# Load powerlevel10k theme
zinit ice depth"1" # git clone depth
zinit light romkatv/powerlevel10k

ZVM_INIT_MODE=sourcing
ZVM_LAZY_KEYBINDINGS=true
ZSH_AUTOSUGGEST_STRATEGY=(history completion)

zinit ice wait lucid 
zinit light zsh-users/zsh-autosuggestions 

zinit ice wait lucid 
zinit light Aloxaf/fzf-tab

zinit ice wait lucid 
zinit light zdharma-continuum/fast-syntax-highlighting

zinit ice depth=1 wait lucid
zinit light jeffreytse/zsh-vi-mode

zinit snippet OMZ::plugins/git/git.plugin.zsh
zinit light 'zsh-users/zsh-history-substring-search'
zinit ice wait atload'_history_substring_search_config'
bindkey -M viins '^[[A' history-substring-search-up
bindkey -M viins '^[[B' history-substring-search-down
bindkey -M vicmd 'k' history-substring-search-up
bindkey -M vicmd 'j' history-substring-search-down

# direnv
zinit from"gh-r" as"program" mv"direnv* -> direnv" \
    atclone'./direnv hook zsh > zhook.zsh' atpull'%atclone' \
    pick"direnv" src="zhook.zsh" for \
        direnv/direnv

# ======== Completion Setup ========
CUSTOM_COMPLETION_DIR=($HOME/zsh_completions $HOME/zsh_functions)
typeset -U fpath=($CUSTOM_COMPLETION_DIR $fpath)
{{- if (contains "linkedin" .chezmoi.fqdnHostname) }}
fpath=("/usr/local/linkedin/etc/zsh" "/export/content/linkedin/etc/zsh" $fpath)
{{- end }}

# Autoload all functions from zsh_functions directory
for func in $HOME/zsh_functions/*(.N:t); do
  autoload -Uz $func
done

autoload -Uz compinit; compinit
zinit cdreplay -q

# setup directory colors
{{- if (eq .chezmoi.os "darwin") }}
# on Mac the command is gdircolors, on Linux it's dircolors
[[ $(command -v gdircolors) ]] && eval $(gdircolors -b)
{{- else }}
[[ $(command -v dircolors) ]] && eval $(dircolors -b)
{{- end }}

# Completion styles
zstyle ':completion:::::' completer _expand _complete _ignored _approximate
zstyle ':completion:*' matcher-list '' 'm:{a-zA-Z}={A-Za-z}' 'r:|[._-]=* r:|=*' 'l:|=* r:|=*'
zstyle ':completion:*:descriptions' format '[%d]'
zstyle ':completion:*' list-colors "${(s.:.)LS_COLORS}"
zstyle ':completion:*' menu no

# FZF-tab configuration
# zstyle ':fzf-tab:*' fzf-flags --height 50% --margin 1,2 --layout=reverse --border rounded --multi '--bind=shift-tab:up,tab:down,ctrl-space:toggle'
zstyle ':fzf-tab:*' use-fzf-default-opts yes
zstyle ':fzf-tab:complete:(cd|z):*' fzf-preview 'tree -C $realpath'
zstyle ':fzf-tab:complete:(eza|ls):*' fzf-preview '[[ ! -d $realpath ]] && bat --color=always $realpath || tree -C $realpath'
zstyle ':fzf-tab:complete:__zoxide_z:*' fzf-preview 'ls --color $realpath'
zstyle ':fzf-tab:complete:(-command-|-parameter-|-brace-parameter-|export|unset|expand):*' fzf-preview 'echo ${(P)word}'

# ======== Key Bindings ========
bindkey '^A' beginning-of-line
bindkey '^E' end-of-line
bindkey "" forward-word    # ctrl+W
bindkey "" backward-word   # ctrl+B

# ======== Tool Configuration ========
# Editor setup
if [[ $(command -v nvim) ]]; then
  export EDITOR=nvim
  # export MANPAGER='NVIM_APPNAME=minimal-lazy nvim +Man! -c "set laststatus=0" -u $HOME/minimal.lua'
  export MANPAGER="sh -c 'col -bx | bat -l man -p'"
fi

# Development tools
if [[ $(command -v devbox) ]]; then
  eval "$(devbox global shellenv)" 2> /dev/null
  alias refresh-global='eval "$(devbox global shellenv --preserve-path-stack -r)" && hash -r'
fi

# Additional tools
if [[ -f ~/.fzf.zsh ]]; then
  source ~/.fzf.zsh
elif command -v fzf >/dev/null; then
  source <(fzf --zsh)
fi
bindkey -M emacs '^[[1;2A' fzf-history-widget
bindkey -M vicmd '^[[1;2A' fzf-history-widget
bindkey -M viins '^[[1;2A' fzf-history-widget

# Zoxide
if command -v zoxide >/dev/null; then
  eval "$(zoxide init zsh)"
  alias zi=__zoxide_zi
fi

# Atuin setup
# if [[ $(command -v atuin) ]]; then
#   export ATUIN_NOBIND="true"
#   eval "$(atuin init zsh)"
#   bindkey '^r' atuin-search
#   bindkey '^[[1;2A' atuin-up-search
# fi

# Yazi file manager
function y() {
  local tmp="$(mktemp -t "yazi-cwd.XXXXXX")" cwd
  yazi "$@" --cwd-file="$tmp"
  if cwd="$(command cat -- "$tmp")" && [ -n "$cwd" ] && [ "$cwd" != "$PWD" ]; then
    builtin cd -- "$cwd"
  fi
  rm -f -- "$tmp"
}

# ======== Path Additions ========
{{- if (eq .chezmoi.os "darwin") }}
[[ -d /Users/Shared/DBngin/ ]] && export PATH="$PATH:/Users/Shared/DBngin/mysql/8.0.19/bin"
{{- end }}
[[ -d $HOME/.cargo ]] && export PATH="$PATH:$HOME/.cargo/bin"

# ======== Theme and Visual Settings ========
export THEME="nightfox"
export eza_params=('--git' '--group' '--group-directories-first' '--time-style=long-iso' '--color-scale=all' '--color=always' '--icons')
export BAT_THEME="ansi"

# ======== Additional Configurations ========
[ -f "$HOME/custom_config.zsh" ] && source "$HOME/custom_config.zsh"
[[ -f "~/.temporal.zsh" ]] && source ~/.temporal.zsh

# Load powerlevel10k
[[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh

# remove duplicate entries from PATH


# zsh abbr config
# ABBR_EXPAND_PUSH_ABBREVIATION_TO_HISTORY=1
# show hints for abbrereviations
# ABBR_GET_AVAILABLE_ABBREVIATION=1
# ABBR_LOG_AVAILABLE_ABBREVIATION=1
# ABBR_LOG_AVAILABLE_ABBREVIATION_AFTER=1
# abbr file
# ABBR_USER_ABBREVIATIONS_FILE="$HOME/abbrs.zsh"
