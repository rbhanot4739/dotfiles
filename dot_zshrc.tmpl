# vim:ft=zsh

# zmodload zsh/zprof

# =====================================
# Zinit Bootstrapping
# =====================================

if [[ ! -f $HOME/.local/share/zinit/zinit.git/zinit.zsh ]]; then
    print -P "%F{33} %F{220}Installing Zinit...%f"
    mkdir -p "$HOME/.local/share/zinit" && chmod g-rwX "$HOME/.local/share/zinit"
    git clone https://github.com/zdharma-continuum/zinit "$HOME/.local/share/zinit/zinit.git" \
        && print -P "%F{33} %F{34}Installation successful.%f" \
        || print -P "%F{160} The clone has failed.%f"
fi

source "$HOME/.local/share/zinit/zinit.git/zinit.zsh"
autoload -Uz _zinit
{{/*
# (( ${+_comps} )) && _comps[zinit]=_zinit

# Enable Powerlevel10k instant prompt
# if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
#   source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
# fi
# (( ${+commands[direnv]} )) && emulate zsh -c "$(direnv hook zsh)"
*/}}
# =====================================
# Terminal Behavior
# =====================================

echo -ne '\e[5 q'    # Use beam cursor
autoload -Uz colors && colors

# =====================================
# History
# =====================================

export HISTSIZE=500000
export HISTFILE=~/.zsh_history
export SAVEHIST=$HISTSIZE
export HISTDUP=erase

setopt APPEND_HISTORY INC_APPEND_HISTORY SHARE_HISTORY
setopt HIST_IGNORE_SPACE HIST_IGNORE_ALL_DUPS HIST_SAVE_NO_DUPS
setopt HIST_FIND_NO_DUPS HIST_REDUCE_BLANKS

# Atuin or Custom History Filtering
if command -v atuin >/dev/null; then
    export ATUIN_NOBIND="true"
    eval "$(atuin init zsh)"

    function zvm_after_init() {
        bindkey -M emacs '' atuin-search
        bindkey -M vicmd '' atuin-search
        bindkey -M viins '' atuin-search
        bindkey '^[[1;2A' atuin-up-search
    }
else
    HIST_IGNORE_REGEXES=(
        '^#.*' '^r$' '^ee$' '^xx$' '^c$' '^z' '^zi'
        '^cm apply' '^cmcd$' '^gs' '^h$' '^gpl' '^gps'
        '^git status' '^git pull' '^git push' '^v$'
    )
    HIST_IGNORE_PATTERN_STRING="^($(IFS='|'; echo "${HIST_IGNORE_REGEXES[*]}"))"

    function zshaddhistory() {
        emulate -L zsh
        local cmd=${1%%$'\n'}
        [[ $cmd =~ $HIST_IGNORE_PATTERN_STRING ]] && return 1
        return 0
    }

    function zvm_after_init() {
        bindkey -M vicmd '^[[1;2A' fzf-history-widget
        bindkey -M viins '^[[1;2A' fzf-history-widget
    }
fi

# =====================================
# Key Bindings
# =====================================

bindkey '^A' beginning-of-line
bindkey '^E' end-of-line
bindkey "" forward-word
bindkey "" backward-word

# Plugins (Zinit)
# =====================================

zinit ice depth=1
zinit light romkatv/powerlevel10k

zinit ice wait"1" lucid blockf
zinit light zsh-users/zsh-autosuggestions

zinit ice wait"1" lucid blockf
zinit light Aloxaf/fzf-tab

zinit ice wait"1" lucid blockf
zinit light jeffreytse/zsh-vi-mode

ZVM_INIT_MODE=sourcing
ZVM_LAZY_KEYBINDINGS=true
ZVM_LINE_INIT_MODE=$ZVM_MODE_INSERT

# zinit snippet OMZ::plugins/git/git.plugin.zsh

zinit ice wait"1" lucid blockf
zinit light zsh-users/zsh-history-substring-search

# Fix: Add missing arrow key bindings for history substring search
bindkey -M vicmd 'k' history-substring-search-up
bindkey -M vicmd 'j' history-substring-search-down
bindkey -M vicmd '^[[A' history-substring-search-up
bindkey -M viins '^[[A' history-substring-search-up
bindkey -M vicmd '^[[B' history-substring-search-down
bindkey -M viins '^[[B' history-substring-search-down
bindkey '^[[A' history-substring-search-up            # For Emacs mode (non-vi)
bindkey '^[[B' history-substring-search-down

zinit ice wait"1" lucid
zinit light zdharma-continuum/fast-syntax-highlighting

# =====================================
# Direnv
# =====================================
if command -v direnv >/dev/null; then
    emulate zsh -c "$(direnv hook zsh)"
fi

# =====================================
# Tools
# =====================================
#if [[ $(command -v devbox) ]]; then
#  eval "$(devbox global shellenv)" 2> /dev/null
#  alias refresh-global='eval "$(devbox global shellenv --preserve-path-stack -r)" && hash -r'
#fi

# setup directory colors
{{- if (eq .chezmoi.os "darwin") }}
{{/* on Mac the command is gdircolors, on Linux it's dircolors */}}
[[ $(command -v gdircolors) ]] && eval $(gdircolors -b)
{{- else }}
[[ $(command -v dircolors) ]] && eval $(dircolors -b)
{{- end }}

if command -v fzf >/dev/null; then
  source <(fzf --zsh)
fi

if command -v zoxide >/dev/null; then
  eval "$(zoxide init zsh)"
    # _lazy_zoxide() {
    #     alias zi=__zoxide_zi
    #     unfunction _lazy_zoxide cd z
    #     # Re-alias cd to the new zoxide-enhanced version
    #     alias cd='__zoxide_z'
    # }
    #
    # # Override both cd and z to trigger lazy loading
    # cd() { _lazy_zoxide; __zoxide_z "$@"; }
    # z() { _lazy_zoxide; __zoxide_z "$@"; }
fi

# =====================================
# File Manager
# =====================================
function y() {
    local tmp="$(mktemp -t "yazi-cwd.XXXXXX")" cwd
    yazi "$@" --cwd-file="$tmp"
    if cwd="$(cat -- "$tmp")" && [[ -n "$cwd" && "$cwd" != "$PWD" ]]; then
        cd "$cwd"
    fi
    rm -f -- "$tmp"
}

# =====================================
# Theme/Visual
# =====================================
export eza_params=('--git' '--group' '--group-directories-first' '--time-style=long-iso' '--color=always' '--icons')
export BAT_THEME="ansi"

# =====================================
# Custom Configs
# =====================================
[[ -f "$HOME/custom_config.zsh" ]] && source "$HOME/custom_config.zsh"

# =====================================
# Completion
# =====================================

CUSTOM_PATHS=($HOME/zsh_completions $HOME/zsh_functions)
typeset -U fpath=($CUSTOM_PATHS $fpath)
{{- if (contains "linkedin" .chezmoi.fqdnHostname) }}
# fpath=("/usr/local/linkedin/etc/zsh" "/export/content/linkedin/etc/zsh" $fpath)
{{- end }}

  # Autoload all functions from zsh_functions directory
for func in $HOME/zsh_functions/*(.N:t); do
    autoload -Uz "$func"
done

autoload -Uz compinit && compinit -C
zinit cdreplay -q &!

# Completion styles
zstyle ':completion:::::' completer _expand _complete _ignored _approximate
zstyle ':completion:*' matcher-list '' 'm:{a-zA-Z}={A-Za-z}' 'r:|[._-]=* r:|=*' 'l:|=* r:|=*'
zstyle ':completion:*:descriptions' format '[%d]'
zstyle ':completion:*' list-colors "${(s.:.)LS_COLORS}"
zstyle ':completion:*' menu no

# Set SSH completion to use only your function's output
zstyle -e ':completion:*:(ssh|scp|sftp|rsync):*:hosts' hosts 'reply=($(__fzf_list_hosts))'
# zstyle -e ':completion:*:(ssh|scp|sftp|rsync):*:hosts' hosts 'reply=($(__fzf_list_hosts))'
zstyle -e ':completion:*:(man):*:hosts' hosts 'reply=($(__fzf_list_man_pages))'
zstyle ':completion:*:(ssh|scp|sftp|rsync|man):*' users ""

# FZF-tab
zstyle ':fzf-tab:*' fzf-command fzf
zstyle ':fzf-tab:*' use-fzf-default-opts no
zstyle ':fzf-tab:*' fzf-flags --height 50%
zstyle ':fzf-tab:complete:(cd|z):*' fzf-preview 'tree -C $realpath'
zstyle ':fzf-tab:complete:(eza|ls):*' fzf-preview '[[ ! -d $realpath ]] && bat --color=always $realpath || tree -C $realpath'
zstyle ':fzf-tab:complete:__zoxide_z:*' fzf-preview 'ls --color $realpath'
zstyle ':fzf-tab:complete:(-command-|-parameter-|-brace-parameter-|export|unset|expand):*' fzf-preview 'echo ${(P)word}'

# =====================================
# Prompt: P10k Theme
# =====================================

[[ -f ~/.p10k.zsh ]] && source ~/.p10k.zsh

# Start theme-monitor in tmux if not already running
if [[ -z "$TMUX" ]] && ! tmux has-session -t themewatcher 2>/dev/null; then
  tmux new-session -d -s themewatcher "$HOME/scripts/theme-monitor"
fi

# zprof
