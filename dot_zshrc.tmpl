# vim:ft=zsh

# Enable Powerlevel10k instant prompt (should stay at top of ~/.zshrc)
if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi

# ======== Critical Environment Setup ========
export LANG=en_US.UTF-8
export LC_CTYPE=en_US.UTF-8
export XDG_CONFIG_HOME="$HOME/.config"
[[ -d $HOME/.local/bin ]] && export PATH="$HOME/.local/bin:$PATH"

{{- if (eq .chezmoi.os "darwin") }}

if [[ -f "/opt/homebrew/bin/brew" ]]; then
  eval "$(/opt/homebrew/bin/brew shellenv)"
fi
{{- end }}

# ======== History Configuration ========
export HISTSIZE=100000
export HISTFILE=~/.zsh_history
export SAVEHIST=$HISTSIZE
export HISTDUP=erase

setopt append_history
setopt hist_ignore_space
setopt hist_ignore_all_dups
setopt share_history
setopt hist_reduce_blanks
setopt inc_append_history
setopt hist_save_no_dups
setopt hist_find_no_dups

# ======== Basic Setup ========
echo -ne '\e[5 q'    # Use beam shape cursor
autoload -U colors && colors

# ======== Plugin Configuration ========
ZVM_INIT_MODE=sourcing
ZVM_LINE_INIT_MODE=$ZVM_MODE_INSERT
ZVM_LAZY_KEYBINDINGS=true

# ======== Plugin Management ========
PLUGIN_DIR="$HOME/.zsh/plugins"
load_plugins() {
    [[ ! -d "$PLUGIN_DIR" ]] && mkdir -p "$PLUGIN_DIR"
    local plugins=(
        "zsh-autosuggestions/zsh-autosuggestions.plugin.zsh"
        "zsh-completions/zsh-completions.plugin.zsh"
        "zsh-history-substring-search/zsh-history-substring-search.plugin.zsh"
        "fzf-tab/fzf-tab.plugin.zsh"
        "zsh-vi-mode/zsh-vi-mode.plugin.zsh"
        "fast-syntax-highlighting/fast-syntax-highlighting.plugin.zsh"
    )
    
    for plugin in $plugins; do
        [[ -f "$PLUGIN_DIR/$plugin" ]] && source "$PLUGIN_DIR/$plugin"
    done
}

# Load plugins
load_plugins

# ======== Completion Setup ========
CUSTOM_COMPLETION_DIR="$HOME/zsh_completions"
fpath=($CUSTOM_COMPLETION_DIR $fpath)
fpath=("/usr/local/linkedin/etc/zsh" "/export/content/linkedin/etc/zsh" $fpath)

autoload -Uz compinit
# Load completions efficiently
if [ $(date +'%j') != $(stat -f '%Sm' -t '%j' ~/.zcompdump 2>/dev/null) ]; then
    compinit
else
    compinit -C -d ~/.zcompdump
fi

# setup directory colors
{{- if (eq .chezmoi.os "darwin") }}
# on Mac the command is gdircolors, on Linux it's dircolors
[[ $(command -v gdircolors) ]] && eval $(gdircolors -b)
{{- else }}
[[ $(command -v dircolors) ]] && eval $(dircolors -b)
{{- end }}

# Completion styles
zstyle ':completion:::::' completer _expand _complete _ignored _approximate
zstyle ':completion:*' matcher-list '' 'm:{a-zA-Z}={A-Za-z}' 'r:|[._-]=* r:|=*' 'l:|=* r:|=*'
zstyle ':completion:*:descriptions' format '[%d]'
zstyle ':completion:*' list-colors "${(s.:.)LS_COLORS}"
zstyle ':completion:*' menu no

# FZF-tab configuration
zstyle ':fzf-tab:*' fzf-flags --height 50% --margin 1,2 --layout=reverse --border rounded --multi '--bind=shift-tab:up,tab:down,ctrl-space:toggle'
zstyle ':fzf-tab:complete:cd:*' fzf-preview 'tree -C $realpath'
zstyle ':fzf-tab:complete:z:*' fzf-preview 'tree -C $realpath'
zstyle ':fzf-tab:complete:ls:*' fzf-preview '[[ ! -d $realpath ]] && bat --color=always $realpath || tree -C $realpath'
zstyle ':fzf-tab:complete:eza:*' fzf-preview '[[ ! -d $realpath ]] && bat --color=always $realpath || tree -C $realpath'
zstyle ':fzf-tab:complete:__zoxide_z:*' fzf-preview 'ls --color $realpath'
zstyle ':fzf-tab:complete:(-command-|-parameter-|-brace-parameter-|export|unset|expand):*' fzf-preview 'echo ${(P)word}'

# ======== Key Bindings ========
# bindkey -e
bindkey '^A' beginning-of-line
bindkey '^E' end-of-line

bindkey "" forward-word    # ctrl+W
bindkey "" backward-word   # ctrl+B
bindkey '^[[A' history-substring-search-up    # up
bindkey '^[[B' history-substring-search-down # down

# ======== Dotfiles mgmt ========
# git init --bare $HOME/dotfiles
# alias dconf='/usr/bin/git --git-dir=$HOME/dotfiles/ --work-tree=$HOME'
# dconf config --local status.showUntrackedFiles no
# echo "alias dconf='/usr/bin/git --git-dir=$HOME/dotfiles/ --work-tree=$HOME'" >> $HOME/.bashrc
# alias dconf='/usr/bin/git --git-dir=/Users/rbhanot/dotfiles/ --work-tree=$HOME'

# ======== Tool Configuration ========
export XDG_CONFIG_HOME="$HOME/.config"
# Editor setup
if [[ $(command -v nvim) ]]; then
  export EDITOR=nvim
  # export MANPAGER='NVIM_APPNAME=minimal-lazy nvim +Man! -c "set laststatus=0" -u $HOME/minimal.lua'
  export MANPAGER="sh -c 'col -bx | bat -l man -p'"
fi

# Development tools
if [[ $(command -v devbox) ]]; then
  eval "$(devbox global shellenv)" 2> /dev/null
  alias refresh-global='eval "$(devbox global shellenv --preserve-path-stack -r)" && hash -r'
fi

# Additional tools
eval "$(mise activate zsh)"
source <(fzf --zsh)
eval "$(zoxide init zsh)"
alias zi=__zoxide_zi

# Atuin setup
if [[ $(command -v atuin) ]]; then
  export ATUIN_NOBIND="true"
  eval "$(atuin init zsh)"
  bindkey '^r' atuin-search
  bindkey '^[[1;2A' atuin-up-search
fi

# Yazi file manager
function y() {
  local tmp="$(mktemp -t "yazi-cwd.XXXXXX")" cwd
  yazi "$@" --cwd-file="$tmp"
  if cwd="$(command cat -- "$tmp")" && [ -n "$cwd" ] && [ "$cwd" != "$PWD" ]; then
    builtin cd -- "$cwd"
  fi
  rm -f -- "$tmp"
}

# ======== Path Additions ========
[[ -d /Users/Shared/DBngin/ ]] && export PATH="$PATH:/Users/Shared/DBngin/mysql/8.0.19/bin"
[[ -d $HOME/.cargo ]] && export PATH="$PATH:$HOME/.cargo/bin"

# ======== Theme and Visual Settings ========
export THEME="nightfox"
export eza_params=('--git' '--group' '--group-directories-first' '--time-style=long-iso' '--color-scale=all' '--color=always' '--icons')
export BAT_THEME="ansi"

# ======== Additional Configurations ========
[ -f "$HOME/custom_config.zsh" ] && source "$HOME/custom_config.zsh"
[[ -f "~/.temporal.zsh" ]] && source ~/.temporal.zsh

# Install powerlevel10k if not present
if [[ ! -d $HOME/powerlevel10k ]]; then
  git clone --depth=1 https://github.com/romkatv/powerlevel10k.git ~/powerlevel10k
fi

# Load powerlevel10k
source ~/powerlevel10k/powerlevel10k.zsh-theme
[[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh

# Direnv (load last to modify PATH)
(( ${+commands[direnv]} )) && emulate zsh -c "$(direnv export zsh)"
command -v direnv > /dev/null && eval "$(direnv hook zsh)"


# zsh abbr config
ABBR_EXPAND_PUSH_ABBREVIATION_TO_HISTORY=1
# show hints for abbrereviations
ABBR_GET_AVAILABLE_ABBREVIATION=1
ABBR_LOG_AVAILABLE_ABBREVIATION=1
ABBR_LOG_AVAILABLE_ABBREVIATION_AFTER=1
# abbr file
# ABBR_USER_ABBREVIATIONS_FILE="$HOME/abbrs.zsh"
